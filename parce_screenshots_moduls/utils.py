import asyncio
import logging
import os
from pathlib import Path

from typing import List
from typing import Optional, Pattern
from playwright.async_api import Response

from tenacity import retry, stop_after_attempt, wait_fixed, retry_if_exception_type
from playwright.async_api import Error as PlaywrightError

from playwright.async_api import Page, TimeoutError as PlaywrightTimeoutError

from config_app import BASE_URL_PRO, BASE_URL_TH
from parce_screenshots_moduls.delete_any_popup import nuke_poll_overlay

from parce_screenshots_moduls.moduls.locators import TG_HIDE_LOCATOR, FLAG_LOCATOR


def load_hotel_ids(file_path: str) -> List[str]:
    with open(file_path, "r", encoding="utf-8") as f:
        return [
            line.strip()
            for line in f
            if line.strip().lower().startswith("al") and line.strip()[2:].isdigit()
        ]


@retry(
    stop=stop_after_attempt(3),
    wait=wait_fixed(2),
    retry=retry_if_exception_type(PlaywrightError),
)
async def get_title_hotel(page: Page, hotel_id):
    try:
        url = BASE_URL_TH + "hotel/" + hotel_id
        await goto_strict(page, url, nuke_overlays=nuke_poll_overlay, expect_url=url)
        #
        # await nuke_overlays(page)
        # await nuke_overlays_once(page)

        await page.wait_for_selector(
            "#container > div.topline > section.topline__info > a > h1",
            state="visible",
            timeout=30000,
        )
        element = await page.query_selector(
            "#container > div.topline > section.topline__info > a > h1"
        )
        if element is None:
            raise PlaywrightError("title_hotel –Ω–µ –Ω–∞–π–¥–µ–Ω")
        title = await element.text_content()
        return title.strip()[:-2].strip()
    except Exception:
        logging.exception("[get_title_hotel] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏")


@retry(
    stop=stop_after_attempt(3),
    wait=wait_fixed(2),
    retry=retry_if_exception_type(PlaywrightError),
)
async def hide_tg(page: Page):
    locator = page.locator(TG_HIDE_LOCATOR)

    try:
        if await locator.is_visible():
            await locator.click()
    except Exception as e:
        logging.exception(f"–ö–ª–∏–∫ –Ω–∞ —Ç–µ–ª–µ–≥—Ä–∞–º —Å–ª–æ–º–∞–ª—Å—è, {e}")


@retry(
    stop=stop_after_attempt(3),
    wait=wait_fixed(2),
    retry=retry_if_exception_type(PlaywrightError),
)
async def set_language_en(page: Page):
    try:
        await page.goto(BASE_URL_PRO)

        await page.wait_for_selector(FLAG_LOCATOR, state="visible", timeout=30000)

        await page.click(FLAG_LOCATOR)

        await page.wait_for_selector(
            "#pp-lang:not(.hidden)", state="visible", timeout=30000
        )

        await page.wait_for_selector("#pp-lang:not(.hidden)", timeout=30000)
        await page.click('#pp-lang li[data-key="en"]')
        await asyncio.sleep(3)
    except Exception as e:
        logging.exception(f"[set_language_en] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ —è–∑—ã–∫–∞: {e}")


# def all_folders_have_count_images(base_path: str, count_files_dir: int) -> bool:
#     for folder in os.listdir(base_path):
#         if folder == "None":
#             continue  # –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–∞–ø–∫—É —Å –∏–º–µ–Ω–µ–º 'None'
#
#         folder_path = os.path.join(base_path, folder)
#         if not os.path.isdir(folder_path):
#             continue
#
#         images = [
#             f
#             for f in os.listdir(folder_path)
#             if f.lower().endswith((".png", ".jpg", ".jpeg"))
#         ]
#         if len(images) < count_files_dir:
#             print(f"üîÅ Folder '{folder}' has only {len(images)} images.")
#             return False
#     return True


async def delete_locator(page: Page, locator: str) -> None:
    """
    –£–¥–∞–ª—è–µ—Ç –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø–æ –ª–æ–∫–∞—Ç–æ—Ä—É, –∏–∑ DOM.
    –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ—Ç.
    """
    elements = page.locator(locator)
    count = await elements.count()
    if count == 0:
        return  # –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ ‚Äî –≤—ã—Ö–æ–¥–∏–º

    for i in range(count):
        await elements.nth(i).evaluate("el => el.remove()")


async def safe_full_page_screenshot(page: Page, save_path: str | Path) -> bool:
    """
    –î–µ–ª–∞–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—è –∏—Å–∫–ª—é—á–µ–Ω–∏—è.

    Args:
        page: –æ–±—ä–µ–∫—Ç Page Playwright.
        save_path: –ø—É—Ç—å, –∫—É–¥–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.

    Returns:
        bool: True, –µ—Å–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ–∑–¥–∞–Ω, False ‚Äî –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞.
    """
    save_path = Path(save_path)
    save_path.parent.mkdir(parents=True, exist_ok=True)

    try:
        await page.screenshot(path=str(save_path), full_page=True)
        print(f"[OK] –ü–æ–ª–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {save_path}")
        return True
    except PlaywrightTimeoutError as e:
        print(f"[ERROR] –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç: {e}")
    return False


async def goto_strict(
    page: Page,
    url: str,
    *,
    wait_until: str = "networkidle",  # 'load' | 'domcontentloaded' | 'networkidle' | 'commit'
    expect_url: Optional[str | Pattern[str]] = None,  # —Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ regex
    ready_selector: Optional[str] = None,  # —Å–µ–ª–µ–∫—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –î–û–õ–ñ–ï–ù –ø–æ—è–≤–∏—Ç—å—Å—è
    timeout: int = 45000,
    retries: int = 2,  # —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –ø–µ—Ä–µ–µ—Ö–∞—Ç—å –ø—Ä–∏ —Ñ–µ–π–ª–µ
    retry_delay_ms: int = 500,  # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
    nuke_overlays: Optional[
        callable
    ] = None,  # —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω—Ç–∏-–ø–æ–ø–∞–ø–æ–≤: async (page) -> int
    overlays_kwargs: Optional[
        dict
    ] = None,  # kwargs –¥–ª—è nuke_overlays (–Ω–∞–ø—Ä–∏–º–µ—Ä, {'retries':3,'delay_ms':400})
) -> Response | None:
    """
    –ù–∞–¥—ë–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –Ω–∞ URL –∏ —É–±–µ–∂–¥–∞–µ—Ç—Å—è, —á—Ç–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –≥–æ—Ç–æ–≤–∞.

    –ì–∞—Ä–∞–Ω—Ç–∏–∏ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º:
      - (–æ–ø—Ü.) URL —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç expect_url (—Å—Ç—Ä–æ–∫–∞ –∏–ª–∏ regex),
      - (–æ–ø—Ü.) –ø–æ—è–≤–∏–ª—Å—è ready_selector (state='visible'),
      - (–æ–ø—Ü.) –∑–∞–ø—É—â–µ–Ω –∞–Ω—Ç–∏-–ø–æ–ø–∞–ø ¬´–ø—ã–ª–µ—Å–æ—Å¬ª nuke_overlays.

    –ë—Ä–æ—Å–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ—Å–ª–µ –≤—Å–µ—Ö —Ä–µ—Ç—Ä–∞–µ–≤ –Ω—É–∂–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç–æ.
    """
    last_exc: Exception | None = None
    overlays_kwargs = overlays_kwargs or {}

    for attempt in range(retries + 1):
        try:
            # 1) –ü–µ—Ä–µ—Ö–æ–¥
            resp = await page.goto(url, wait_until=wait_until, timeout=timeout)

            # 2) –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å Response)
            if resp and not resp.ok:
                raise RuntimeError(f"GET {url} -> HTTP {resp.status}")

            # 3) –î–æ–∂–¥–∞—Ç—å—Å—è –ø–æ–ª–Ω–æ–π –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ (–ø–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞)
            await page.wait_for_function(
                "document.readyState === 'complete'", timeout=timeout
            )

            # 4) –ê–Ω—Ç–∏-–ø–æ–ø–∞–ø—ã (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é)
            if nuke_overlays:
                try:
                    await nuke_overlays(page, **overlays_kwargs)
                except Exception:
                    # –Ω–µ –≤–∞–ª–∏–º –ø–µ—Ä–µ—Ö–æ–¥ –∏–∑-–∑–∞ —á–∏—Å—Ç–∫–∏ –ø–æ–ø–∞–ø–æ–≤
                    pass

            # 5) –ü—Ä–æ–≤–µ—Ä–∫–∞ URL (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
            if expect_url is not None:
                await page.wait_for_url(expect_url, timeout=timeout)

            # 6) –ñ–¥—ë–º —è–∫–æ—Ä–Ω—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
            if ready_selector:
                await page.wait_for_selector(
                    ready_selector, state="visible", timeout=timeout
                )

            # –í—Å—ë –æ–∫ ‚Äî –≤—ã—Ö–æ–¥–∏–º
            return resp

        except Exception:
            if attempt < retries:
                # –ú—è–≥–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –∏ –ø–æ–≤—Ç–æ—Ä
                await asyncio.sleep(retry_delay_ms / 1000)
                continue
            # –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø–æ–ø—ã—Ç–∫–∏ ‚Äî –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º
            raise
