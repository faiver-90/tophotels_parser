# concurrent_runner.py
import asyncio
import logging
import os
from pathlib import Path
from typing import Optional, Iterable

from playwright.async_api import async_playwright, Browser, BrowserContext, Page
from tqdm import tqdm

from config_app import (
    HOTELS_IDS_FILE,
    HEADLESS,
    RESOLUTION_W,
    RESOLUTION_H,
    ENABLED_SHOTS,
    CONCURRENCY,
    AUTH_STATE,
)
from auth_service import AuthService

from parce_screenshots_moduls.utils import (
    set_language_en,
    get_title_star_hotel,
)
from parce_screenshots_moduls.moduls.top_screen import top_screen
from parce_screenshots_moduls.moduls.review_screen import review_screen
from parce_screenshots_moduls.moduls.attendance import attendance
from parce_screenshots_moduls.moduls.service_prices import service_prices
from parce_screenshots_moduls.moduls.rating_hotels_in_hurghada import (
    rating_hotels_in_hurghada,
)
from parce_screenshots_moduls.moduls.last_activity import last_activity

from utils import safe_step, save_to_jsonfile, load_hotel_ids  # —Ç–≤–æ—è –æ–±—ë—Ä—Ç–∫–∞


async def login_once_and_save_state(browser: Browser) -> None:
    """–û–¥–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è ‚Üí —Å–æ—Ö—Ä–∞–Ω—è–µ–º storage_state –≤ —Ñ–∞–π–ª –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ reuse."""
    ctx = await browser.new_context()
    page = await ctx.new_page()
    try:
        await set_language_en(page)
        await AuthService(page).login()
        await ctx.storage_state(path=str(AUTH_STATE))
        logging.info("üîê storage_state —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ %s", AUTH_STATE)
    finally:
        await ctx.close()


async def make_context(browser: Browser) -> BrowserContext:
    """–°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–º storage_state (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –ª–æ–≥–∏–Ω–∞)."""
    if not AUTH_STATE.exists():
        await login_once_and_save_state(browser)
    return await browser.new_context(
        storage_state=str(AUTH_STATE),
        locale="en-US",
        viewport={"width": RESOLUTION_W, "height": RESOLUTION_H},
    )


async def process_hotel(page: Page, hotel_id: str) -> None:
    """–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω –ø–æ –æ–¥–Ω–æ–º—É –æ—Ç–µ–ª—é –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ."""
    title, star = await safe_step(get_title_star_hotel, page, hotel_id)
    save_to_jsonfile(hotel_id, title, key="star", value=star)
    if title is None:
        logging.warning(
            "‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å title –¥–ª—è %s, –ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑...", hotel_id
        )
        title = await safe_step(get_title_star_hotel, page, hotel_id)

    await safe_step(top_screen, page, hotel_id, title)
    count_review = await safe_step(review_screen, page, hotel_id, title)
    await safe_step(attendance, page, hotel_id, title)
    await safe_step(service_prices, page, hotel_id, title)
    await safe_step(rating_hotels_in_hurghada, page, count_review, hotel_id, title)
    await safe_step(last_activity, page, hotel_id, title)

    logging.info("‚úÖ –ì–æ—Ç–æ–≤–æ: %s (%s)", hotel_id, title)


async def worker(
    name: str, browser: Browser, queue: asyncio.Queue[str], pbar: tqdm
) -> None:
    """–í–æ—Ä–∫–µ—Ä: —Å–≤–æ–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –æ–¥–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞, –±–µ—Ä—ë—Ç ID –∏–∑ –æ—á–µ—Ä–µ–¥–∏."""
    ctx = await make_context(browser)
    page = await ctx.new_page()
    try:
        while True:
            hotel_id = await queue.get()
            try:
                logging.info("[%s] ‚ñ∂ %s", name, hotel_id)
                await process_hotel(page, hotel_id)
            except Exception:
                logging.exception("[%s] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ %s", name, hotel_id)
            finally:
                pbar.update(1)
                queue.task_done()
    except asyncio.CancelledError:
        pass
    finally:
        await page.close()
        await ctx.close()


def _dedupe(seq: Iterable[str]) -> list[str]:
    """–£–±–∏—Ä–∞–µ–º –ø–æ–≤—Ç–æ—Ä—ã, —Å–æ—Ö—Ä–∞–Ω—è—è –ø–æ—Ä—è–¥–æ–∫."""
    seen, out = set(), []
    for x in seq:
        if x not in seen:
            seen.add(x)
            out.append(x)
    return out


def _hotel_folder_matches(hotel_id: str, folder_name: str) -> bool:
    # –ü–∞–ø–∫–∏ —É —Ç–µ–±—è –≤–∏–¥–∞ "al233_Jaz Fayrouz" ‚Äî —Å–≤–µ—Ä—è–µ–º –ø—Ä–µ—Ñ–∏–∫—Å –¥–æ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏—è
    return folder_name.startswith(f"{hotel_id}_")


REQUIRED_EXT = {".png", ".jpg", ".jpeg"}


def hotels_needing_retry(screens_dir: Path, hotel_ids: list[str]) -> list[str]:
    need = []
    existing = [p.name for p in screens_dir.glob("*") if p.is_dir()]
    for hid in hotel_ids:
        fold = next((f for f in existing if _hotel_folder_matches(hid, f)), None)
        if not fold:
            need.append(hid)
            continue
        files = {
            p.name
            for p in (screens_dir / fold).iterdir()
            if p.suffix.lower() in REQUIRED_EXT
        }
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω—ã–µ –∏–º–µ–Ω–∞
        missing = [name for name in ENABLED_SHOTS if name not in files]
        if missing:
            need.append(hid)
    return need


async def run_concurrent(hotel_ids: Optional[list[str]] = None) -> None:
    """
    –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞.
    –ï—Å–ª–∏ hotel_ids –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ–º –∏–∑ —Ñ–∞–π–ª–∞.
    """
    hotel_ids = _dedupe(hotel_ids or load_hotel_ids(HOTELS_IDS_FILE))
    if not hotel_ids:
        logging.error("–§–∞–π–ª —Å ID –ø—É—Å—Ç –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
        return
    try:
        async with async_playwright() as p:
            browser = await p.chromium.launch(headless=HEADLESS)

            queue: asyncio.Queue[str] = asyncio.Queue()
            for hid in hotel_ids:
                queue.put_nowait(hid)

            pbar = tqdm(total=len(hotel_ids), desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–µ–ª–µ–π", unit="–æ—Ç–µ–ª—å")

            n_workers = max(1, CONCURRENCY)
            tasks = [
                asyncio.create_task(worker(f"W{i + 1}", browser, queue, pbar))
                for i in range(n_workers)
            ]

            await queue.join()
            pbar.close()

            for t in tasks:
                t.cancel()
            await asyncio.gather(*tasks, return_exceptions=True)
    except Exception as e:
        logging.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞: {e}")
    finally:
        await browser.close()
