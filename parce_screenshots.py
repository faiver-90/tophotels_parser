import asyncio
import logging

from playwright.async_api import async_playwright
from tqdm import tqdm

from config_app import (
    HOTELS_IDS_FILE,
    SCREENSHOTS_DIR,
    MAX_ATTEMPTS_RUN,
    HEADLESS,
    MAX_FIRST_RUN,
)
from auth_service import AuthService

from parce_screenshots_moduls.utils import (
    set_language_en,
    load_hotel_ids,
    get_title_hotel,
    all_folders_have_count_images,
)
from parce_screenshots_moduls.moduls.top_screen import top_screen
from parce_screenshots_moduls.moduls.review_screen import review_screen
from parce_screenshots_moduls.moduls.attendance import attendance
from parce_screenshots_moduls.moduls.dynamic_rating import dynamic_rating
from parce_screenshots_moduls.moduls.service_prices import service_prices
from parce_screenshots_moduls.moduls.rating_hotels_in_hurghada import (
    rating_hotels_in_hurghada,
)
from parce_screenshots_moduls.moduls.last_activity import last_activity
from utils import safe_step


async def run():
    hotel_ids = load_hotel_ids(HOTELS_IDS_FILE)
    if not hotel_ids:
        logging.error("–§–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ ID.")
        return

    async with async_playwright() as p:
        browser = await p.chromium.launch(headless=HEADLESS)
        context = await browser.new_context(
            locale="en-US", viewport={"width": 1005, "height": 1000}
        )
        page = await context.new_page()

        try:
            await set_language_en(page)
            logging.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è...")
            await AuthService(page).login()
            logging.info("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞.")
        except Exception:
            logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
            return

        # –û–±—ã—á–Ω—ã–π for + tqdm –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å, —Å–∫–æ—Ä–æ—Å—Ç—å –∏ ETA
        for hotel_id in tqdm(
            hotel_ids, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–µ–ª–µ–π", unit="–æ—Ç–µ–ª—å", dynamic_ncols=True
        ):
            try:
                tqdm.write(
                    f"‚Üí {hotel_id}"
                )  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –≤—ã–≤–µ—Å—Ç–∏ —Ç–µ–∫—É—â–∏–π ID –ø–æ–≤–µ—Ä—Ö –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                title = await safe_step(get_title_hotel, page, hotel_id)

                await safe_step(top_screen, page, hotel_id, title)
                count_review = await safe_step(review_screen, page, hotel_id, title)
                await safe_step(attendance, page, hotel_id, title)
                await safe_step(dynamic_rating, page, hotel_id, title)
                await safe_step(service_prices, page, hotel_id, title)
                await safe_step(
                    rating_hotels_in_hurghada, page, count_review, hotel_id, title
                )
                await safe_step(last_activity, page, hotel_id, title)

                logging.info(f"‚úÖ –ì–æ—Ç–æ–≤–æ: {hotel_id} ({title})")
            except Exception:
                logging.exception(
                    f"‚ÄºÔ∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–µ–ª—è {hotel_id} ({title or 'unknown'})"
                )

        await browser.close()


async def run_create_report():
    for attempt in range(1, MAX_ATTEMPTS_RUN + 1):
        print(f"\nüåÄ Attempt {attempt} of {MAX_ATTEMPTS_RUN}")
        await run()

        if attempt >= MAX_FIRST_RUN and all_folders_have_count_images(
            SCREENSHOTS_DIR, 8
        ):
            print("‚úÖ All folders contain at least 8 images.")
            break
        else:
            print("‚ö† Not all folders are complete or second lap. Retrying...\n")
            await asyncio.sleep(1)  # –ú–æ–∂–Ω–æ —É–±—Ä–∞—Ç—å –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å –ø–∞—É–∑—É –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    else:
        print("‚ùå Max attempts reached. Some folders still have less than 8 images.")
